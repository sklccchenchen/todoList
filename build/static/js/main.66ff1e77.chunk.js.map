{"version":3,"sources":["TodoInput.js","TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","react_default","a","createElement","className","type","props","content","onKeyPress","submit","bind","onChange","changeTitle","e","onSubmit","React","Component","TodoItem","id","checked","todo","status","toggle","title","onClick","delete","onToggle","onDelete","App","newTodo","todoList","push","idMaker","target","deleted","setState","_this2","todos","filter","item","map","index","src_TodoItem_0","TodoInput_TodoInput","addTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66ff1e77.chunk.js","sourcesContent":["import React from 'react' \r\nimport './todoInput.css'\r\n\r\n/*export function TodoInput(props){\r\n    return <input type=\"text\" value={props.value} />\r\n}\r\n*/\r\n\r\nexport class TodoInput extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n           <div>\r\n            <input className=\"todoInput\"\r\n                type=\"text\" value={this.props.content} \r\n                onKeyPress={this.submit.bind(this)}\r\n                onChange={this.changeTitle.bind(this)} />\r\n            {/* <button className=\"add-btn\" onClick={this.Submit.bind(this)}>Add</button> */}\r\n            </div>\r\n        )\r\n    }\r\n    // Submit(e){\r\n    //     this.props.onSubmit(e)\r\n    // }\r\n    submit(e){\r\n        \r\n        if(e.key === 'Enter'){\r\n            this.props.onSubmit(e)\r\n        }\r\n    }\r\n    changeTitle(e){\r\n        this.props.onChange(e)\r\n    }\r\n}\r\n","import React, { Component } from 'react' \r\nimport './TodoItem.css'\r\n\r\n\r\nclass TodoItem extends Component{\r\n    render(){\r\n        return (\r\n           <div id=\"todoItem\"> \r\n              <div id=\"todo\">\r\n                <input type=\"checkbox\" checked={this.props.todo.status === 'completed'} \r\n                onChange={this.toggle.bind(this)} />\r\n                {this.props.todo.title}\r\n              </div>\r\n              <button onClick={this.delete.bind(this)}>删除</button>\r\n            </div>\r\n        )\r\n    }\r\n    toggle(e){\r\n      this.props.onToggle(e,this.props.todo)\r\n    }\r\n    delete(e){\r\n      this.props.onDelete(e,this.props.todo)\r\n    }\r\n}\r\n\r\nexport default TodoItem","import React, { Component } from 'react';\nimport 'normalize.css'\nimport {TodoInput} from './TodoInput'\nimport TodoItem from './TodoItem'\nimport './App.css';\nimport './reset.css'\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      newTodo: '',\n      todoList:[]\n        // {id:1,title:'第一个待办事项',completed:false,deleted:false},\n        // {id:2,title:'第二个待办事项',completed:false,deleted:false},\n        // {id:3,title:'第三个待办事项',completed:false,deleted:false}\n      \n    }\n  }\n\n  addTodo(e){\n    this.state.todoList.push({\n      id: idMaker(),\n      title: e.target.value,\n      status: null,\n      deleted: false\n    })\n    this.setState({\n      newTodo: '',\n      todoList: this.state.todoList\n    })\n  }\n  changeTitle(e){\n    this.setState({\n      newTodo: e.target.value,\n      todoList: this.state.todoList\n    })\n  }\n  delete(e,todo){\n    todo.deleted = true\n    this.setState(this.state)\n  }\n  \n  toggle(e,todo){\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state)\n  }\n\n  render() {\n    let todos = this.state.todoList.filter((item)=>!item.deleted).map((item,index) =>{\n      return (\n        <li key={index}>\n          <TodoItem todo={item} onToggle={this.toggle.bind(this)} \n                    onDelete={this.delete.bind(this)} />\n        </li>\n        ) \n    })\n \n    return (\n      <div className=\"App\">\n        <h1>我的待办</h1>\n        <div className=\"inputWrapper\">\n          <TodoInput content={this.state.newTodo} \n              onChange={this.changeTitle.bind(this)} \n              onSubmit={this.addTodo.bind(this)} />\n        </div>\n        <ol className=\"todoList\">\n          {todos}\n        </ol>\n      </div>\n    )\n  }\n}\n\nexport default App\n\nlet id = 0;\n\nfunction idMaker(){\n  id += 1;\n  return id\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}